# Generated by Django 4.2.3 on 2023-08-02 13:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CoMinimizing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "item_image",
                    models.ImageField(blank=True, null=True, upload_to="cominimizing/"),
                ),
                ("item_name", models.CharField(max_length=100)),
                ("item_number", models.PositiveIntegerField()),
                ("item_shelf_number_in_storage", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="ConnectedAppliance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="LoftRentals",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rent_value_euro",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                (
                    "present_status",
                    models.CharField(
                        choices=[("occupied", "Occupied"), ("free", "Free")],
                        max_length=10,
                    ),
                ),
                ("rental_period_from", models.DateField(blank=True, null=True)),
                ("rental_period_to", models.DateField(blank=True, null=True)),
                ("loft_number", models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="MaintenanceAndHousekeeping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("loft_number", models.PositiveIntegerField()),
                (
                    "item_to_be_repaired",
                    models.CharField(
                        choices=[
                            ("kitchen_plumbing", "Kitchen Plumbing"),
                            ("bathroom_plumbing", "Bathroom Plumbing"),
                            ("panelling_system", "Panelling System"),
                            ("video_system", "Video System"),
                            ("audio_system", "Audio System"),
                            ("ventilation_system", "Ventilation System"),
                            ("bed_system", "Bed System"),
                            ("ventilation_system", "Ventilation System"),
                            ("others", "Others"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TemporaryStandRental",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rent_day_value_yi",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Rent Value in Euro for Yi Number",
                    ),
                ),
                (
                    "present_status_yi",
                    models.CharField(
                        choices=[("occupied", "Occupied"), ("free", "Free")],
                        max_length=10,
                        verbose_name="Present Status for Yi Number",
                    ),
                ),
                (
                    "rental_period_from_yi",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Rental Period From for Yi Number",
                    ),
                ),
                (
                    "rental_period_to_yi",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Rental Period To for Yi Number",
                    ),
                ),
                (
                    "rent_day_value_yang",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Rent Value in Euro for Yang Number",
                    ),
                ),
                (
                    "present_status_yang",
                    models.CharField(
                        choices=[("occupied", "Occupied"), ("free", "Free")],
                        max_length=10,
                        verbose_name="Present Status for Yang Number",
                    ),
                ),
                (
                    "rental_period_from_yang",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Rental Period From for Yang Number",
                    ),
                ),
                (
                    "rental_period_to_yang",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Rental Period To for Yang Number",
                    ),
                ),
                ("temporary_stand_number", models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LoftFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feature",
                    models.CharField(
                        choices=[
                            ("lighting", "Lighting"),
                            ("audio", "Audio"),
                            ("video", "Video"),
                            ("ventilation_ac", "Ventilation/AC"),
                            ("bed_up_down", "Bed Up and Down"),
                            ("panel1_open_close_fold", "Panel 1 - Open/Close/Fold"),
                            ("panel2_open_close_fold", "Panel 2 - Open/Close/Fold"),
                            ("entrance_door_security", "Entrance Door Security"),
                            ("silent_sound_system", "Silent Sound System"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "connected_appliance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="data_inputs.connectedappliance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
